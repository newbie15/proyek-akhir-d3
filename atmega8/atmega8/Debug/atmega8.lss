
atmega8.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000744  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  00000744  000007d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000005b  00800076  00800076  000007ee  2**0
                  ALLOC
  3 .stab         00000b40  00000000  00000000  000007f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000020c  00000000  00000000  00001330  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000040  00000000  00000000  0000153c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001a3  00000000  00000000  0000157c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000a98  00000000  00000000  0000171f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000351  00000000  00000000  000021b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000099e  00000000  00000000  00002508  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000150  00000000  00000000  00002ea8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002b3  00000000  00000000  00002ff8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000552  00000000  00000000  000032ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000063  00000000  00000000  000037fd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	5a c2       	rjmp	.+1204   	; 0x4cc <__vector_11>
  18:	82 c2       	rjmp	.+1284   	; 0x51e <__vector_12>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e4 e4       	ldi	r30, 0x44	; 68
  3a:	f7 e0       	ldi	r31, 0x07	; 7
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a6 37       	cpi	r26, 0x76	; 118
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	a6 e7       	ldi	r26, 0x76	; 118
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a1 3d       	cpi	r26, 0xD1	; 209
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	3b d1       	rcall	.+630    	; 0x2d0 <main>
  5a:	72 c3       	rjmp	.+1764   	; 0x740 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <adc_init>:

// initialize adc
void adc_init()
{
    // AREF = AVcc
    ADMUX = (1<<REFS0);
  5e:	80 e4       	ldi	r24, 0x40	; 64
  60:	87 b9       	out	0x07, r24	; 7

    // ADC Enable and prescaler of 128
    // 16000000/128 = 125000
    ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
  62:	87 e8       	ldi	r24, 0x87	; 135
  64:	86 b9       	out	0x06, r24	; 6
}
  66:	08 95       	ret

00000068 <adc_read>:
{
    // select the corresponding channel 0~7
    // ANDing with '7' will always keep the value
    // of 'ch' between 0 and 7
    ch &= 0b00000111;  // AND operation with 7
    ADMUX = (ADMUX & 0xF8)|ch;     // clears the bottom 3 bits before ORing
  68:	97 b1       	in	r25, 0x07	; 7
uint16_t adc_read(uint8_t ch)
{
    // select the corresponding channel 0~7
    // ANDing with '7' will always keep the value
    // of 'ch' between 0 and 7
    ch &= 0b00000111;  // AND operation with 7
  6a:	87 70       	andi	r24, 0x07	; 7
    ADMUX = (ADMUX & 0xF8)|ch;     // clears the bottom 3 bits before ORing
  6c:	98 7f       	andi	r25, 0xF8	; 248
  6e:	89 2b       	or	r24, r25
  70:	87 b9       	out	0x07, r24	; 7

    // start single conversion
    // write '1' to ADSC
    ADCSRA |= (1<<ADSC);
  72:	36 9a       	sbi	0x06, 6	; 6

    // wait for conversion to complete
    // ADSC becomes '0' again
    // till then, run loop continuously
    while(ADCSRA & (1<<ADSC));
  74:	36 99       	sbic	0x06, 6	; 6
  76:	fe cf       	rjmp	.-4      	; 0x74 <adc_read+0xc>
	
    return (ADC);
  78:	24 b1       	in	r18, 0x04	; 4
  7a:	35 b1       	in	r19, 0x05	; 5
}
  7c:	c9 01       	movw	r24, r18
  7e:	08 95       	ret

00000080 <putar_kanan>:
*/


//putar kanan fix
void putar_kanan(){
	if (count == 5)
  80:	80 91 c6 00 	lds	r24, 0x00C6
  84:	85 30       	cpi	r24, 0x05	; 5
  86:	19 f4       	brne	.+6      	; 0x8e <putar_kanan+0xe>
	{
		count = 1;
  88:	81 e0       	ldi	r24, 0x01	; 1
  8a:	80 93 c6 00 	sts	0x00C6, r24
	}
	count++;	
  8e:	80 91 c6 00 	lds	r24, 0x00C6
  92:	8f 5f       	subi	r24, 0xFF	; 255
  94:	80 93 c6 00 	sts	0x00C6, r24
	if(count == 1){
  98:	81 30       	cpi	r24, 0x01	; 1
  9a:	11 f4       	brne	.+4      	; 0xa0 <putar_kanan+0x20>
		//PORTC = 0b00001000;
		PORTC = 0b00001010;
  9c:	8a e0       	ldi	r24, 0x0A	; 10
  9e:	03 c0       	rjmp	.+6      	; 0xa6 <putar_kanan+0x26>
	}else if(count == 2){
  a0:	82 30       	cpi	r24, 0x02	; 2
  a2:	19 f4       	brne	.+6      	; 0xaa <putar_kanan+0x2a>
		//PORTC = 0b00000010;
		PORTC = 0b00000110;
  a4:	86 e0       	ldi	r24, 0x06	; 6
  a6:	85 bb       	out	0x15, r24	; 21
  a8:	0a c0       	rjmp	.+20     	; 0xbe <putar_kanan+0x3e>
	}else if(count == 3){
  aa:	83 30       	cpi	r24, 0x03	; 3
  ac:	11 f4       	brne	.+4      	; 0xb2 <putar_kanan+0x32>
		//PORTC = 0b00000100;
		PORTC = 0b00000101;
  ae:	85 e0       	ldi	r24, 0x05	; 5
  b0:	fa cf       	rjmp	.-12     	; 0xa6 <putar_kanan+0x26>
	}else if(count == 4){
  b2:	84 30       	cpi	r24, 0x04	; 4
  b4:	21 f4       	brne	.+8      	; 0xbe <putar_kanan+0x3e>
		//PORTC = 0b00000001;
		PORTC = 0b00001001;
  b6:	89 e0       	ldi	r24, 0x09	; 9
  b8:	85 bb       	out	0x15, r24	; 21
		count = 0;		
  ba:	10 92 c6 00 	sts	0x00C6, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  be:	8f ef       	ldi	r24, 0xFF	; 255
  c0:	9f ea       	ldi	r25, 0xAF	; 175
  c2:	a1 e0       	ldi	r26, 0x01	; 1
  c4:	81 50       	subi	r24, 0x01	; 1
  c6:	90 40       	sbci	r25, 0x00	; 0
  c8:	a0 40       	sbci	r26, 0x00	; 0
  ca:	e1 f7       	brne	.-8      	; 0xc4 <putar_kanan+0x44>
  cc:	00 c0       	rjmp	.+0      	; 0xce <putar_kanan+0x4e>
  ce:	00 00       	nop
	}
	//count++;
	_delay_ms(50);
	PORTC = 0b00000000;
  d0:	15 ba       	out	0x15, r1	; 21
  d2:	8f ef       	ldi	r24, 0xFF	; 255
  d4:	9f eb       	ldi	r25, 0xBF	; 191
  d6:	a6 e0       	ldi	r26, 0x06	; 6
  d8:	81 50       	subi	r24, 0x01	; 1
  da:	90 40       	sbci	r25, 0x00	; 0
  dc:	a0 40       	sbci	r26, 0x00	; 0
  de:	e1 f7       	brne	.-8      	; 0xd8 <putar_kanan+0x58>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <putar_kanan+0x62>
  e2:	00 00       	nop
	_delay_ms(200);	
}
  e4:	08 95       	ret

000000e6 <putar_kiri>:

void putar_kiri(){
	if (count == 0)
  e6:	80 91 c6 00 	lds	r24, 0x00C6
  ea:	88 23       	and	r24, r24
  ec:	19 f4       	brne	.+6      	; 0xf4 <putar_kiri+0xe>
	{
		count = 5;
  ee:	85 e0       	ldi	r24, 0x05	; 5
  f0:	80 93 c6 00 	sts	0x00C6, r24
	}
	count--;	
  f4:	80 91 c6 00 	lds	r24, 0x00C6
  f8:	81 50       	subi	r24, 0x01	; 1
  fa:	80 93 c6 00 	sts	0x00C6, r24
	if(count == 1){
  fe:	81 30       	cpi	r24, 0x01	; 1
 100:	31 f4       	brne	.+12     	; 0x10e <putar_kiri+0x28>
		//PORTC = 0b00001000;
		PORTC = 0b00001010;
 102:	8a e0       	ldi	r24, 0x0A	; 10
 104:	85 bb       	out	0x15, r24	; 21
		count = 5;		
 106:	85 e0       	ldi	r24, 0x05	; 5
 108:	80 93 c6 00 	sts	0x00C6, r24
 10c:	0c c0       	rjmp	.+24     	; 0x126 <putar_kiri+0x40>
	}else if(count == 2){
 10e:	82 30       	cpi	r24, 0x02	; 2
 110:	11 f4       	brne	.+4      	; 0x116 <putar_kiri+0x30>
		//PORTC = 0b00000010;
		PORTC = 0b00000110;	
 112:	86 e0       	ldi	r24, 0x06	; 6
 114:	07 c0       	rjmp	.+14     	; 0x124 <putar_kiri+0x3e>
	}else if(count == 3){
 116:	83 30       	cpi	r24, 0x03	; 3
 118:	11 f4       	brne	.+4      	; 0x11e <putar_kiri+0x38>
		//PORTC = 0b00000100;
		PORTC = 0b00000101;
 11a:	85 e0       	ldi	r24, 0x05	; 5
 11c:	03 c0       	rjmp	.+6      	; 0x124 <putar_kiri+0x3e>
	}else if(count == 4){
 11e:	84 30       	cpi	r24, 0x04	; 4
 120:	11 f4       	brne	.+4      	; 0x126 <putar_kiri+0x40>
		//PORTC = 0b00000001;
		PORTC = 0b00001001;
 122:	89 e0       	ldi	r24, 0x09	; 9
 124:	85 bb       	out	0x15, r24	; 21
 126:	8f ef       	ldi	r24, 0xFF	; 255
 128:	9f ea       	ldi	r25, 0xAF	; 175
 12a:	a1 e0       	ldi	r26, 0x01	; 1
 12c:	81 50       	subi	r24, 0x01	; 1
 12e:	90 40       	sbci	r25, 0x00	; 0
 130:	a0 40       	sbci	r26, 0x00	; 0
 132:	e1 f7       	brne	.-8      	; 0x12c <putar_kiri+0x46>
 134:	00 c0       	rjmp	.+0      	; 0x136 <putar_kiri+0x50>
 136:	00 00       	nop
	}
	//count++;
	_delay_ms(50);
	PORTC = 0b00000000;
 138:	15 ba       	out	0x15, r1	; 21
 13a:	8f ef       	ldi	r24, 0xFF	; 255
 13c:	9f eb       	ldi	r25, 0xBF	; 191
 13e:	a6 e0       	ldi	r26, 0x06	; 6
 140:	81 50       	subi	r24, 0x01	; 1
 142:	90 40       	sbci	r25, 0x00	; 0
 144:	a0 40       	sbci	r26, 0x00	; 0
 146:	e1 f7       	brne	.-8      	; 0x140 <putar_kiri+0x5a>
 148:	00 c0       	rjmp	.+0      	; 0x14a <putar_kiri+0x64>
 14a:	00 00       	nop
	_delay_ms(200);	
}
 14c:	08 95       	ret

0000014e <mode_terima>:
void mode_terima(){
	PORTD &= 0b11111011;
 14e:	92 98       	cbi	0x12, 2	; 18
}
 150:	08 95       	ret

00000152 <mode_kirim>:
void mode_kirim(){
	PORTD |= 0b00000100;
 152:	92 9a       	sbi	0x12, 2	; 18
}
 154:	08 95       	ret

00000156 <clear_buffer>:
void clear_buffer(){
	for(unsigned char i=0;i<=count;i++){
 156:	20 91 c6 00 	lds	r18, 0x00C6
 15a:	80 e0       	ldi	r24, 0x00	; 0
		buffer[i]=' ';
 15c:	90 e2       	ldi	r25, 0x20	; 32
 15e:	e8 2f       	mov	r30, r24
 160:	f0 e0       	ldi	r31, 0x00	; 0
 162:	e2 54       	subi	r30, 0x42	; 66
 164:	ff 4f       	sbci	r31, 0xFF	; 255
 166:	90 83       	st	Z, r25
}
void mode_kirim(){
	PORTD |= 0b00000100;
}
void clear_buffer(){
	for(unsigned char i=0;i<=count;i++){
 168:	8f 5f       	subi	r24, 0xFF	; 255
 16a:	28 17       	cp	r18, r24
 16c:	c0 f7       	brcc	.-16     	; 0x15e <clear_buffer+0x8>
		buffer[i]=' ';
	}
}
 16e:	08 95       	ret

00000170 <kalibrasi>:
void kalibrasi(){
	count = 0;
 170:	10 92 c6 00 	sts	0x00C6, r1
 174:	0a c0       	rjmp	.+20     	; 0x18a <kalibrasi+0x1a>
	x = adc_read(5);
	while(x > 47){
		putar_kiri();
 176:	b7 df       	rcall	.-146    	; 0xe6 <putar_kiri>
 178:	8f ef       	ldi	r24, 0xFF	; 255
 17a:	9f ed       	ldi	r25, 0xDF	; 223
 17c:	a0 e1       	ldi	r26, 0x10	; 16
 17e:	81 50       	subi	r24, 0x01	; 1
 180:	90 40       	sbci	r25, 0x00	; 0
 182:	a0 40       	sbci	r26, 0x00	; 0
 184:	e1 f7       	brne	.-8      	; 0x17e <kalibrasi+0xe>
 186:	00 c0       	rjmp	.+0      	; 0x188 <kalibrasi+0x18>
 188:	00 00       	nop
		_delay_ms(500);
		x = adc_read(5);
 18a:	85 e0       	ldi	r24, 0x05	; 5
 18c:	6d df       	rcall	.-294    	; 0x68 <adc_read>
 18e:	90 93 bc 00 	sts	0x00BC, r25
 192:	80 93 bb 00 	sts	0x00BB, r24
	}
}
void kalibrasi(){
	count = 0;
	x = adc_read(5);
	while(x > 47){
 196:	80 91 bb 00 	lds	r24, 0x00BB
 19a:	90 91 bc 00 	lds	r25, 0x00BC
 19e:	80 33       	cpi	r24, 0x30	; 48
 1a0:	91 05       	cpc	r25, r1
 1a2:	48 f7       	brcc	.-46     	; 0x176 <kalibrasi+0x6>
		putar_kiri();
		_delay_ms(500);
		x = adc_read(5);
	}
}
 1a4:	08 95       	ret

000001a6 <putar_ke>:
void putar_ke(){
	x = adc_read(5);
 1a6:	85 e0       	ldi	r24, 0x05	; 5
 1a8:	5f df       	rcall	.-322    	; 0x68 <adc_read>
 1aa:	90 93 bc 00 	sts	0x00BC, r25
 1ae:	80 93 bb 00 	sts	0x00BB, r24
	mode_kirim();
 1b2:	cf df       	rcall	.-98     	; 0x152 <mode_kirim>
	itoa(sudut,kalimat,10);
 1b4:	80 91 c7 00 	lds	r24, 0x00C7
 1b8:	90 91 c8 00 	lds	r25, 0x00C8
 1bc:	6d ec       	ldi	r22, 0xCD	; 205
 1be:	70 e0       	ldi	r23, 0x00	; 0
 1c0:	4a e0       	ldi	r20, 0x0A	; 10
 1c2:	50 e0       	ldi	r21, 0x00	; 0
 1c4:	86 d2       	rcall	.+1292   	; 0x6d2 <itoa>
	uart_puts("sudut ");
 1c6:	80 e6       	ldi	r24, 0x60	; 96
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	0e d2       	rcall	.+1052   	; 0x5e8 <uart_puts>
	uart_puts(kalimat);
 1cc:	8d ec       	ldi	r24, 0xCD	; 205
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	0b d2       	rcall	.+1046   	; 0x5e8 <uart_puts>
	uart_puts("\n");
 1d2:	87 e6       	ldi	r24, 0x67	; 103
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	08 d2       	rcall	.+1040   	; 0x5e8 <uart_puts>
	diff = (int)sudut - (int)x;
 1d8:	80 91 c7 00 	lds	r24, 0x00C7
 1dc:	90 91 c8 00 	lds	r25, 0x00C8
 1e0:	20 91 bb 00 	lds	r18, 0x00BB
 1e4:	30 91 bc 00 	lds	r19, 0x00BC
 1e8:	82 1b       	sub	r24, r18
 1ea:	93 0b       	sbc	r25, r19
 1ec:	90 93 cb 00 	sts	0x00CB, r25
 1f0:	80 93 ca 00 	sts	0x00CA, r24
	itoa(diff,kalimat,10);
 1f4:	6d ec       	ldi	r22, 0xCD	; 205
 1f6:	70 e0       	ldi	r23, 0x00	; 0
 1f8:	4a e0       	ldi	r20, 0x0A	; 10
 1fa:	50 e0       	ldi	r21, 0x00	; 0
 1fc:	6a d2       	rcall	.+1236   	; 0x6d2 <itoa>
	uart_puts("diff ");
 1fe:	89 e6       	ldi	r24, 0x69	; 105
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	f2 d1       	rcall	.+996    	; 0x5e8 <uart_puts>
	uart_puts(kalimat);
 204:	8d ec       	ldi	r24, 0xCD	; 205
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	ef d1       	rcall	.+990    	; 0x5e8 <uart_puts>
	uart_puts("\n");
 20a:	87 e6       	ldi	r24, 0x67	; 103
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	ec d1       	rcall	.+984    	; 0x5e8 <uart_puts>
	if(diff > 0){
 210:	80 91 ca 00 	lds	r24, 0x00CA
 214:	90 91 cb 00 	lds	r25, 0x00CB
 218:	18 16       	cp	r1, r24
 21a:	19 06       	cpc	r1, r25
 21c:	04 f1       	brlt	.+64     	; 0x25e <putar_ke+0xb8>
 21e:	2a c0       	rjmp	.+84     	; 0x274 <putar_ke+0xce>
		while(!((diff > -15) && (diff < 15))){
			if (diff > 0)
 220:	18 16       	cp	r1, r24
 222:	19 06       	cpc	r1, r25
 224:	14 f4       	brge	.+4      	; 0x22a <putar_ke+0x84>
			{
				putar_kanan();
 226:	2c df       	rcall	.-424    	; 0x80 <putar_kanan>
 228:	01 c0       	rjmp	.+2      	; 0x22c <putar_ke+0x86>
			}else{
				putar_kiri();
 22a:	5d df       	rcall	.-326    	; 0xe6 <putar_kiri>
 22c:	8f ef       	ldi	r24, 0xFF	; 255
 22e:	9f ed       	ldi	r25, 0xDF	; 223
 230:	a0 e1       	ldi	r26, 0x10	; 16
 232:	81 50       	subi	r24, 0x01	; 1
 234:	90 40       	sbci	r25, 0x00	; 0
 236:	a0 40       	sbci	r26, 0x00	; 0
 238:	e1 f7       	brne	.-8      	; 0x232 <putar_ke+0x8c>
 23a:	00 c0       	rjmp	.+0      	; 0x23c <putar_ke+0x96>
 23c:	00 00       	nop
			}
			//putar_kanan();
			_delay_ms(500);
			x = adc_read(5);
 23e:	85 e0       	ldi	r24, 0x05	; 5
 240:	13 df       	rcall	.-474    	; 0x68 <adc_read>
 242:	90 93 bc 00 	sts	0x00BC, r25
 246:	80 93 bb 00 	sts	0x00BB, r24
			//uart_puts("kanan\n");
			diff = (int)sudut - (int)x;
 24a:	20 91 c7 00 	lds	r18, 0x00C7
 24e:	30 91 c8 00 	lds	r19, 0x00C8
 252:	28 1b       	sub	r18, r24
 254:	39 0b       	sbc	r19, r25
 256:	30 93 cb 00 	sts	0x00CB, r19
 25a:	20 93 ca 00 	sts	0x00CA, r18
	itoa(diff,kalimat,10);
	uart_puts("diff ");
	uart_puts(kalimat);
	uart_puts("\n");
	if(diff > 0){
		while(!((diff > -15) && (diff < 15))){
 25e:	80 91 ca 00 	lds	r24, 0x00CA
 262:	90 91 cb 00 	lds	r25, 0x00CB
 266:	9c 01       	movw	r18, r24
 268:	22 5f       	subi	r18, 0xF2	; 242
 26a:	3f 4f       	sbci	r19, 0xFF	; 255
 26c:	2d 31       	cpi	r18, 0x1D	; 29
 26e:	31 05       	cpc	r19, r1
 270:	b8 f6       	brcc	.-82     	; 0x220 <putar_ke+0x7a>
 272:	08 95       	ret
			uart_puts(kalimat);
			uart_puts("\n");
			*/
		}	
	}else{
		diff = (int)x - (int)sudut;
 274:	80 91 bb 00 	lds	r24, 0x00BB
 278:	90 91 bc 00 	lds	r25, 0x00BC
 27c:	14 c0       	rjmp	.+40     	; 0x2a6 <putar_ke+0x100>
		while(!((diff > -15) && (diff < 15))){
			if (diff < 0)
 27e:	97 ff       	sbrs	r25, 7
 280:	02 c0       	rjmp	.+4      	; 0x286 <putar_ke+0xe0>
			{
				putar_kanan();
 282:	fe de       	rcall	.-516    	; 0x80 <putar_kanan>
 284:	01 c0       	rjmp	.+2      	; 0x288 <putar_ke+0xe2>
			}else{
				putar_kiri();
 286:	2f df       	rcall	.-418    	; 0xe6 <putar_kiri>
 288:	8f ef       	ldi	r24, 0xFF	; 255
 28a:	9f ed       	ldi	r25, 0xDF	; 223
 28c:	a0 e1       	ldi	r26, 0x10	; 16
 28e:	81 50       	subi	r24, 0x01	; 1
 290:	90 40       	sbci	r25, 0x00	; 0
 292:	a0 40       	sbci	r26, 0x00	; 0
 294:	e1 f7       	brne	.-8      	; 0x28e <putar_ke+0xe8>
 296:	00 c0       	rjmp	.+0      	; 0x298 <putar_ke+0xf2>
 298:	00 00       	nop
			}
			_delay_ms(500);
			x = adc_read(5);
 29a:	85 e0       	ldi	r24, 0x05	; 5
 29c:	e5 de       	rcall	.-566    	; 0x68 <adc_read>
 29e:	90 93 bc 00 	sts	0x00BC, r25
 2a2:	80 93 bb 00 	sts	0x00BB, r24
			//uart_puts("kiri\n");
			diff = (int)x - (int)sudut;
 2a6:	20 91 c7 00 	lds	r18, 0x00C7
 2aa:	30 91 c8 00 	lds	r19, 0x00C8
 2ae:	82 1b       	sub	r24, r18
 2b0:	93 0b       	sbc	r25, r19
 2b2:	90 93 cb 00 	sts	0x00CB, r25
 2b6:	80 93 ca 00 	sts	0x00CA, r24
			uart_puts("\n");
			*/
		}	
	}else{
		diff = (int)x - (int)sudut;
		while(!((diff > -15) && (diff < 15))){
 2ba:	80 91 ca 00 	lds	r24, 0x00CA
 2be:	90 91 cb 00 	lds	r25, 0x00CB
 2c2:	9c 01       	movw	r18, r24
 2c4:	22 5f       	subi	r18, 0xF2	; 242
 2c6:	3f 4f       	sbci	r19, 0xFF	; 255
 2c8:	2d 31       	cpi	r18, 0x1D	; 29
 2ca:	31 05       	cpc	r19, r1
 2cc:	c0 f6       	brcc	.-80     	; 0x27e <putar_ke+0xd8>
 2ce:	08 95       	ret

000002d0 <main>:
		}			
	}
	
}

int main(){
 2d0:	0f 93       	push	r16
 2d2:	1f 93       	push	r17
	DDRC |= 0b00001111; // stepper
 2d4:	84 b3       	in	r24, 0x14	; 20
 2d6:	8f 60       	ori	r24, 0x0F	; 15
 2d8:	84 bb       	out	0x14, r24	; 20
	DDRD |= 0b00000100;
 2da:	8a 9a       	sbi	0x11, 2	; 17
	
	uart_init(UART_BAUD_SELECT(UART_BAUD_RATE,F_CPU));
 2dc:	87 e4       	ldi	r24, 0x47	; 71
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	43 d1       	rcall	.+646    	; 0x568 <uart_init>
	sei();
 2e2:	78 94       	sei
	adc_init();
 2e4:	bc de       	rcall	.-648    	; 0x5e <adc_init>
    
	count = 0;
 2e6:	10 92 c6 00 	sts	0x00C6, r1
	//{
	//	putar_kanan();		
	//}
	char data[4];
	
	mode_kirim();
 2ea:	33 df       	rcall	.-410    	; 0x152 <mode_kirim>
	//while(1){
		x = adc_read(5);
 2ec:	85 e0       	ldi	r24, 0x05	; 5
 2ee:	bc de       	rcall	.-648    	; 0x68 <adc_read>
 2f0:	90 93 bc 00 	sts	0x00BC, r25
 2f4:	80 93 bb 00 	sts	0x00BB, r24
		itoa(x,kalimat,10);
 2f8:	6d ec       	ldi	r22, 0xCD	; 205
 2fa:	70 e0       	ldi	r23, 0x00	; 0
 2fc:	4a e0       	ldi	r20, 0x0A	; 10
 2fe:	50 e0       	ldi	r21, 0x00	; 0
 300:	e8 d1       	rcall	.+976    	; 0x6d2 <itoa>
		uart_puts("*"); uart_puts(kalimat); uart_puts("#\n");
 302:	8f e6       	ldi	r24, 0x6F	; 111
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	70 d1       	rcall	.+736    	; 0x5e8 <uart_puts>
 308:	8d ec       	ldi	r24, 0xCD	; 205
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	6d d1       	rcall	.+730    	; 0x5e8 <uart_puts>
 30e:	81 e7       	ldi	r24, 0x71	; 113
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	6a d1       	rcall	.+724    	; 0x5e8 <uart_puts>
	//}	
	mode_terima();
 314:	1c df       	rcall	.-456    	; 0x14e <mode_terima>
	step = 0;
 316:	10 92 c9 00 	sts	0x00C9, r1
				_delay_ms(500);
				step = 1;
			}
			
			if (step == 1 && satu == 0){
				step++;
 31a:	02 e0       	ldi	r16, 0x02	; 2
			if (c == 'r')
			{
				uart_flush();
				putar_kanan();
				_delay_ms(500);
				step = 1;
 31c:	11 e0       	ldi	r17, 0x01	; 1
 31e:	cd c0       	rjmp	.+410    	; 0x4ba <__stack+0x5b>
		
		//putar_kanan();
		//_delay_ms(1500);
		
		while(uart_available() > 0){
			c = uart_getc();
 320:	37 d1       	rcall	.+622    	; 0x590 <uart_getc>
 322:	90 93 c4 00 	sts	0x00C4, r25
 326:	80 93 c3 00 	sts	0x00C3, r24
			if (c == '$')
 32a:	84 32       	cpi	r24, 0x24	; 36
 32c:	91 05       	cpc	r25, r1
 32e:	11 f5       	brne	.+68     	; 0x374 <main+0xa4>
			{
				x = adc_read(5);
 330:	85 e0       	ldi	r24, 0x05	; 5
 332:	9a de       	rcall	.-716    	; 0x68 <adc_read>
 334:	90 93 bc 00 	sts	0x00BC, r25
 338:	80 93 bb 00 	sts	0x00BB, r24
				itoa(x,kalimat,10);
 33c:	6d ec       	ldi	r22, 0xCD	; 205
 33e:	70 e0       	ldi	r23, 0x00	; 0
 340:	4a e0       	ldi	r20, 0x0A	; 10
 342:	50 e0       	ldi	r21, 0x00	; 0
 344:	c6 d1       	rcall	.+908    	; 0x6d2 <itoa>
				mode_kirim();
 346:	05 df       	rcall	.-502    	; 0x152 <mode_kirim>
 348:	8f ef       	ldi	r24, 0xFF	; 255
 34a:	9b e6       	ldi	r25, 0x6B	; 107
 34c:	01 97       	sbiw	r24, 0x01	; 1
 34e:	f1 f7       	brne	.-4      	; 0x34c <main+0x7c>
 350:	00 c0       	rjmp	.+0      	; 0x352 <main+0x82>
 352:	00 00       	nop
				_delay_ms(10);
				uart_puts("*");
 354:	8f e6       	ldi	r24, 0x6F	; 111
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	47 d1       	rcall	.+654    	; 0x5e8 <uart_puts>
				uart_puts(kalimat);
 35a:	8d ec       	ldi	r24, 0xCD	; 205
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	44 d1       	rcall	.+648    	; 0x5e8 <uart_puts>
				uart_puts("#");
 360:	84 e7       	ldi	r24, 0x74	; 116
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	41 d1       	rcall	.+642    	; 0x5e8 <uart_puts>
 366:	af ef       	ldi	r26, 0xFF	; 255
 368:	bb e6       	ldi	r27, 0x6B	; 107
 36a:	11 97       	sbiw	r26, 0x01	; 1
 36c:	f1 f7       	brne	.-4      	; 0x36a <main+0x9a>
 36e:	00 c0       	rjmp	.+0      	; 0x370 <main+0xa0>
 370:	00 00       	nop
				_delay_ms(10);
				mode_terima();
 372:	ed de       	rcall	.-550    	; 0x14e <mode_terima>
			}
			if (c == '#' || start == 2)
 374:	80 91 c3 00 	lds	r24, 0x00C3
 378:	90 91 c4 00 	lds	r25, 0x00C4
 37c:	83 32       	cpi	r24, 0x23	; 35
 37e:	91 05       	cpc	r25, r1
 380:	21 f0       	breq	.+8      	; 0x38a <main+0xba>
 382:	80 91 cc 00 	lds	r24, 0x00CC
 386:	82 30       	cpi	r24, 0x02	; 2
 388:	39 f5       	brne	.+78     	; 0x3d8 <main+0x108>
			{
				mode_kirim();
 38a:	e3 de       	rcall	.-570    	; 0x152 <mode_kirim>
 38c:	8f ef       	ldi	r24, 0xFF	; 255
 38e:	9b e6       	ldi	r25, 0x6B	; 107
 390:	01 97       	sbiw	r24, 0x01	; 1
 392:	f1 f7       	brne	.-4      	; 0x390 <main+0xc0>
 394:	00 c0       	rjmp	.+0      	; 0x396 <main+0xc6>
 396:	00 00       	nop
				_delay_ms(10);
				sudut = atoi(buffer);
 398:	8e eb       	ldi	r24, 0xBE	; 190
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	7d d1       	rcall	.+762    	; 0x698 <atoi>
 39e:	90 93 c8 00 	sts	0x00C8, r25
 3a2:	80 93 c7 00 	sts	0x00C7, r24
				
				uart_puts(buffer);
 3a6:	8e eb       	ldi	r24, 0xBE	; 190
 3a8:	90 e0       	ldi	r25, 0x00	; 0
 3aa:	1e d1       	rcall	.+572    	; 0x5e8 <uart_puts>
				uart_puts("\n");
 3ac:	87 e6       	ldi	r24, 0x67	; 103
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	1b d1       	rcall	.+566    	; 0x5e8 <uart_puts>
 3b2:	af ef       	ldi	r26, 0xFF	; 255
 3b4:	bb e6       	ldi	r27, 0x6B	; 107
 3b6:	11 97       	sbiw	r26, 0x01	; 1
 3b8:	f1 f7       	brne	.-4      	; 0x3b6 <main+0xe6>
 3ba:	00 c0       	rjmp	.+0      	; 0x3bc <main+0xec>
 3bc:	00 00       	nop
				_delay_ms(10);
				mode_terima();
 3be:	c7 de       	rcall	.-626    	; 0x14e <mode_terima>
				start = 0;
 3c0:	10 92 cc 00 	sts	0x00CC, r1
				clear_buffer();
 3c4:	c8 de       	rcall	.-624    	; 0x156 <clear_buffer>
				putar_ke(sudut);
 3c6:	80 91 c7 00 	lds	r24, 0x00C7
 3ca:	90 91 c8 00 	lds	r25, 0x00C8
 3ce:	eb de       	rcall	.-554    	; 0x1a6 <putar_ke>
				counter = 0;
 3d0:	10 92 c5 00 	sts	0x00C5, r1
				start = 0;
 3d4:	10 92 cc 00 	sts	0x00CC, r1
			}
			if (start == 1)
 3d8:	80 91 cc 00 	lds	r24, 0x00CC
 3dc:	81 30       	cpi	r24, 0x01	; 1
 3de:	81 f4       	brne	.+32     	; 0x400 <main+0x130>
			{
				buffer[counter] = c;
 3e0:	80 91 c5 00 	lds	r24, 0x00C5
 3e4:	e8 2f       	mov	r30, r24
 3e6:	f0 e0       	ldi	r31, 0x00	; 0
 3e8:	e2 54       	subi	r30, 0x42	; 66
 3ea:	ff 4f       	sbci	r31, 0xFF	; 255
 3ec:	90 91 c3 00 	lds	r25, 0x00C3
 3f0:	90 83       	st	Z, r25
				counter++;
 3f2:	8f 5f       	subi	r24, 0xFF	; 255
 3f4:	80 93 c5 00 	sts	0x00C5, r24
				if (counter == 4)
 3f8:	84 30       	cpi	r24, 0x04	; 4
 3fa:	11 f4       	brne	.+4      	; 0x400 <main+0x130>
				{
					start = 2;
 3fc:	00 93 cc 00 	sts	0x00CC, r16
				}
			}
			if (c == '*')
 400:	80 91 c3 00 	lds	r24, 0x00C3
 404:	90 91 c4 00 	lds	r25, 0x00C4
 408:	8a 32       	cpi	r24, 0x2A	; 42
 40a:	91 05       	cpc	r25, r1
 40c:	29 f4       	brne	.+10     	; 0x418 <main+0x148>
			{
				start = 1;
 40e:	10 93 cc 00 	sts	0x00CC, r17
				counter = 0;
 412:	10 92 c5 00 	sts	0x00C5, r1
 416:	10 c0       	rjmp	.+32     	; 0x438 <main+0x168>
			}
			
			if (c == 'l')
 418:	8c 36       	cpi	r24, 0x6C	; 108
 41a:	91 05       	cpc	r25, r1
 41c:	69 f4       	brne	.+26     	; 0x438 <main+0x168>
			{
				uart_flush();
 41e:	10 d1       	rcall	.+544    	; 0x640 <uart_flush>
				putar_kiri();
 420:	62 de       	rcall	.-828    	; 0xe6 <putar_kiri>
 422:	8f ef       	ldi	r24, 0xFF	; 255
 424:	9f ed       	ldi	r25, 0xDF	; 223
 426:	a0 e1       	ldi	r26, 0x10	; 16
 428:	81 50       	subi	r24, 0x01	; 1
 42a:	90 40       	sbci	r25, 0x00	; 0
 42c:	a0 40       	sbci	r26, 0x00	; 0
 42e:	e1 f7       	brne	.-8      	; 0x428 <main+0x158>
 430:	00 c0       	rjmp	.+0      	; 0x432 <main+0x162>
 432:	00 00       	nop
				_delay_ms(500);
				step = 1;
 434:	10 93 c9 00 	sts	0x00C9, r17
			}
			if (c == 'r')
 438:	80 91 c3 00 	lds	r24, 0x00C3
 43c:	90 91 c4 00 	lds	r25, 0x00C4
 440:	82 37       	cpi	r24, 0x72	; 114
 442:	91 05       	cpc	r25, r1
 444:	69 f4       	brne	.+26     	; 0x460 <__stack+0x1>
			{
				uart_flush();
 446:	fc d0       	rcall	.+504    	; 0x640 <uart_flush>
				putar_kanan();
 448:	1b de       	rcall	.-970    	; 0x80 <putar_kanan>
 44a:	8f ef       	ldi	r24, 0xFF	; 255
 44c:	9f ed       	ldi	r25, 0xDF	; 223
 44e:	a0 e1       	ldi	r26, 0x10	; 16
 450:	81 50       	subi	r24, 0x01	; 1
 452:	90 40       	sbci	r25, 0x00	; 0
 454:	a0 40       	sbci	r26, 0x00	; 0
 456:	e1 f7       	brne	.-8      	; 0x450 <main+0x180>
 458:	00 c0       	rjmp	.+0      	; 0x45a <main+0x18a>
 45a:	00 00       	nop
				_delay_ms(500);
				step = 1;
 45c:	10 93 c9 00 	sts	0x00C9, r17
			}
			
			if (step == 1 && satu == 0){
 460:	80 91 c9 00 	lds	r24, 0x00C9
 464:	81 30       	cpi	r24, 0x01	; 1
 466:	49 f5       	brne	.+82     	; 0x4ba <__stack+0x5b>
 468:	90 91 bd 00 	lds	r25, 0x00BD
 46c:	99 23       	and	r25, r25
 46e:	29 f5       	brne	.+74     	; 0x4ba <__stack+0x5b>
				step++;
 470:	00 93 c9 00 	sts	0x00C9, r16
				satu = 1;
 474:	80 93 bd 00 	sts	0x00BD, r24
				x = adc_read(5);
 478:	85 e0       	ldi	r24, 0x05	; 5
 47a:	f6 dd       	rcall	.-1044   	; 0x68 <adc_read>
 47c:	90 93 bc 00 	sts	0x00BC, r25
 480:	80 93 bb 00 	sts	0x00BB, r24
				itoa(x,kalimat,10);
 484:	6d ec       	ldi	r22, 0xCD	; 205
 486:	70 e0       	ldi	r23, 0x00	; 0
 488:	4a e0       	ldi	r20, 0x0A	; 10
 48a:	50 e0       	ldi	r21, 0x00	; 0
 48c:	22 d1       	rcall	.+580    	; 0x6d2 <itoa>
				
				mode_kirim();
 48e:	61 de       	rcall	.-830    	; 0x152 <mode_kirim>
 490:	af ef       	ldi	r26, 0xFF	; 255
 492:	bb e6       	ldi	r27, 0x6B	; 107
 494:	11 97       	sbiw	r26, 0x01	; 1
 496:	f1 f7       	brne	.-4      	; 0x494 <__stack+0x35>
 498:	00 c0       	rjmp	.+0      	; 0x49a <__stack+0x3b>
 49a:	00 00       	nop
				_delay_ms(10);
				uart_puts("*");
 49c:	8f e6       	ldi	r24, 0x6F	; 111
 49e:	90 e0       	ldi	r25, 0x00	; 0
 4a0:	a3 d0       	rcall	.+326    	; 0x5e8 <uart_puts>
				uart_puts(kalimat);
 4a2:	8d ec       	ldi	r24, 0xCD	; 205
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	a0 d0       	rcall	.+320    	; 0x5e8 <uart_puts>
				uart_puts("#");
 4a8:	84 e7       	ldi	r24, 0x74	; 116
 4aa:	90 e0       	ldi	r25, 0x00	; 0
 4ac:	9d d0       	rcall	.+314    	; 0x5e8 <uart_puts>
 4ae:	8f ef       	ldi	r24, 0xFF	; 255
 4b0:	9b e6       	ldi	r25, 0x6B	; 107
 4b2:	01 97       	sbiw	r24, 0x01	; 1
 4b4:	f1 f7       	brne	.-4      	; 0x4b2 <__stack+0x53>
 4b6:	00 c0       	rjmp	.+0      	; 0x4b8 <__stack+0x59>
 4b8:	00 00       	nop
		*/
		
		//putar_kanan();
		//_delay_ms(1500);
		
		while(uart_available() > 0){
 4ba:	b6 d0       	rcall	.+364    	; 0x628 <uart_available>
 4bc:	18 16       	cp	r1, r24
 4be:	19 06       	cpc	r1, r25
 4c0:	0c f4       	brge	.+2      	; 0x4c4 <__stack+0x65>
 4c2:	2e cf       	rjmp	.-420    	; 0x320 <main+0x50>
				uart_puts("#");
				_delay_ms(10);
			}
		}
		
		satu = 0;
 4c4:	10 92 bd 00 	sts	0x00BD, r1
		mode_terima();
 4c8:	42 de       	rcall	.-892    	; 0x14e <mode_terima>
 4ca:	f7 cf       	rjmp	.-18     	; 0x4ba <__stack+0x5b>

000004cc <__vector_11>:
ISR(UART0_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
 4cc:	1f 92       	push	r1
 4ce:	0f 92       	push	r0
 4d0:	0f b6       	in	r0, 0x3f	; 63
 4d2:	0f 92       	push	r0
 4d4:	11 24       	eor	r1, r1
 4d6:	2f 93       	push	r18
 4d8:	8f 93       	push	r24
 4da:	9f 93       	push	r25
 4dc:	ef 93       	push	r30
 4de:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */ 
    usr  = UART0_STATUS;
 4e0:	8b b1       	in	r24, 0x0b	; 11
    data = UART0_DATA;
 4e2:	9c b1       	in	r25, 0x0c	; 12
#elif defined ( ATMEGA_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#endif
        
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
 4e4:	e0 91 77 00 	lds	r30, 0x0077
 4e8:	ef 5f       	subi	r30, 0xFF	; 255
 4ea:	ef 71       	andi	r30, 0x1F	; 31
    
    if ( tmphead == UART_RxTail ) {
 4ec:	20 91 76 00 	lds	r18, 0x0076
 4f0:	e2 17       	cp	r30, r18
 4f2:	41 f0       	breq	.+16     	; 0x504 <__vector_11+0x38>
    
    /* */
#if defined( AT90_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
 4f4:	88 71       	andi	r24, 0x18	; 24
    if ( tmphead == UART_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }else{
        /* store new index */
        UART_RxHead = tmphead;
 4f6:	e0 93 77 00 	sts	0x0077, r30
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
 4fa:	f0 e0       	ldi	r31, 0x00	; 0
 4fc:	e6 56       	subi	r30, 0x66	; 102
 4fe:	ff 4f       	sbci	r31, 0xFF	; 255
 500:	90 83       	st	Z, r25
 502:	01 c0       	rjmp	.+2      	; 0x506 <__vector_11+0x3a>
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
    
    if ( tmphead == UART_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
 504:	82 e0       	ldi	r24, 0x02	; 2
        /* store new index */
        UART_RxHead = tmphead;
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    }
    UART_LastRxError = lastRxError;   
 506:	80 93 ba 00 	sts	0x00BA, r24
}
 50a:	ff 91       	pop	r31
 50c:	ef 91       	pop	r30
 50e:	9f 91       	pop	r25
 510:	8f 91       	pop	r24
 512:	2f 91       	pop	r18
 514:	0f 90       	pop	r0
 516:	0f be       	out	0x3f, r0	; 63
 518:	0f 90       	pop	r0
 51a:	1f 90       	pop	r1
 51c:	18 95       	reti

0000051e <__vector_12>:
ISR(UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
 51e:	1f 92       	push	r1
 520:	0f 92       	push	r0
 522:	0f b6       	in	r0, 0x3f	; 63
 524:	0f 92       	push	r0
 526:	11 24       	eor	r1, r1
 528:	8f 93       	push	r24
 52a:	9f 93       	push	r25
 52c:	ef 93       	push	r30
 52e:	ff 93       	push	r31
    unsigned char tmptail;

    
    if ( UART_TxHead != UART_TxTail) {
 530:	90 91 78 00 	lds	r25, 0x0078
 534:	80 91 79 00 	lds	r24, 0x0079
 538:	98 17       	cp	r25, r24
 53a:	61 f0       	breq	.+24     	; 0x554 <__vector_12+0x36>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
 53c:	e0 91 79 00 	lds	r30, 0x0079
 540:	ef 5f       	subi	r30, 0xFF	; 255
 542:	ef 71       	andi	r30, 0x1F	; 31
        UART_TxTail = tmptail;
 544:	e0 93 79 00 	sts	0x0079, r30
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
 548:	f0 e0       	ldi	r31, 0x00	; 0
 54a:	e6 58       	subi	r30, 0x86	; 134
 54c:	ff 4f       	sbci	r31, 0xFF	; 255
 54e:	80 81       	ld	r24, Z
 550:	8c b9       	out	0x0c, r24	; 12
 552:	01 c0       	rjmp	.+2      	; 0x556 <__vector_12+0x38>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
 554:	55 98       	cbi	0x0a, 5	; 10
    }
}
 556:	ff 91       	pop	r31
 558:	ef 91       	pop	r30
 55a:	9f 91       	pop	r25
 55c:	8f 91       	pop	r24
 55e:	0f 90       	pop	r0
 560:	0f be       	out	0x3f, r0	; 63
 562:	0f 90       	pop	r0
 564:	1f 90       	pop	r1
 566:	18 95       	reti

00000568 <uart_init>:
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart_init(unsigned int baudrate)
{
    UART_TxHead = 0;
 568:	10 92 78 00 	sts	0x0078, r1
    UART_TxTail = 0;
 56c:	10 92 79 00 	sts	0x0079, r1
    UART_RxHead = 0;
 570:	10 92 77 00 	sts	0x0077, r1
    UART_RxTail = 0;
 574:	10 92 76 00 	sts	0x0076, r1
    /* enable UART receiver and transmmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|_BV(RXEN)|_BV(TXEN);

#elif defined (ATMEGA_USART)
    /* Set baud rate */
    if ( baudrate & 0x8000 )
 578:	97 ff       	sbrs	r25, 7
 57a:	03 c0       	rjmp	.+6      	; 0x582 <uart_init+0x1a>
    {
    	 UART0_STATUS = (1<<U2X);  //Enable 2x speed 
 57c:	22 e0       	ldi	r18, 0x02	; 2
 57e:	2b b9       	out	0x0b, r18	; 11
    	 baudrate &= ~0x8000;
 580:	9f 77       	andi	r25, 0x7F	; 127
    }
    UBRRH = (unsigned char)(baudrate>>8);
 582:	90 bd       	out	0x20, r25	; 32
    UBRRL = (unsigned char) baudrate;
 584:	89 b9       	out	0x09, r24	; 9
   
    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|(1<<RXEN)|(1<<TXEN);
 586:	88 e9       	ldi	r24, 0x98	; 152
 588:	8a b9       	out	0x0a, r24	; 10
    
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    #ifdef URSEL
    UCSRC = (1<<URSEL)|(3<<UCSZ0);
 58a:	86 e8       	ldi	r24, 0x86	; 134
 58c:	80 bd       	out	0x20, r24	; 32
    /* Enable UART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|(1<<RXEN)|(1<<TXEN);

#endif

}/* uart_init */
 58e:	08 95       	ret

00000590 <uart_getc>:
{    
    unsigned char tmptail;
    unsigned char data;


    if ( UART_RxHead == UART_RxTail ) {
 590:	90 91 77 00 	lds	r25, 0x0077
 594:	80 91 76 00 	lds	r24, 0x0076
 598:	98 17       	cp	r25, r24
 59a:	89 f0       	breq	.+34     	; 0x5be <uart_getc+0x2e>
        return UART_NO_DATA;   /* no data available */
    }
    
    /* calculate /store buffer index */
    tmptail = (UART_RxTail + 1) & UART_RX_BUFFER_MASK;
 59c:	e0 91 76 00 	lds	r30, 0x0076
 5a0:	ef 5f       	subi	r30, 0xFF	; 255
 5a2:	ef 71       	andi	r30, 0x1F	; 31
    UART_RxTail = tmptail; 
 5a4:	e0 93 76 00 	sts	0x0076, r30
    
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
 5a8:	f0 e0       	ldi	r31, 0x00	; 0
 5aa:	e6 56       	subi	r30, 0x66	; 102
 5ac:	ff 4f       	sbci	r31, 0xFF	; 255
 5ae:	80 81       	ld	r24, Z
    
    return (UART_LastRxError << 8) + data;
 5b0:	90 91 ba 00 	lds	r25, 0x00BA
 5b4:	39 2f       	mov	r19, r25
 5b6:	20 e0       	ldi	r18, 0x00	; 0
 5b8:	28 0f       	add	r18, r24
 5ba:	31 1d       	adc	r19, r1
 5bc:	02 c0       	rjmp	.+4      	; 0x5c2 <uart_getc+0x32>
    unsigned char tmptail;
    unsigned char data;


    if ( UART_RxHead == UART_RxTail ) {
        return UART_NO_DATA;   /* no data available */
 5be:	20 e0       	ldi	r18, 0x00	; 0
 5c0:	31 e0       	ldi	r19, 0x01	; 1
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
    
    return (UART_LastRxError << 8) + data;

}/* uart_getc */
 5c2:	c9 01       	movw	r24, r18
 5c4:	08 95       	ret

000005c6 <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;

    
    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 5c6:	90 91 78 00 	lds	r25, 0x0078
 5ca:	9f 5f       	subi	r25, 0xFF	; 255
 5cc:	9f 71       	andi	r25, 0x1F	; 31
    
    while ( tmphead == UART_TxTail ){
 5ce:	20 91 79 00 	lds	r18, 0x0079
 5d2:	92 17       	cp	r25, r18
 5d4:	e1 f3       	breq	.-8      	; 0x5ce <uart_putc+0x8>
        ;/* wait for free space in buffer */
    }
    
    UART_TxBuf[tmphead] = data;
 5d6:	e9 2f       	mov	r30, r25
 5d8:	f0 e0       	ldi	r31, 0x00	; 0
 5da:	e6 58       	subi	r30, 0x86	; 134
 5dc:	ff 4f       	sbci	r31, 0xFF	; 255
 5de:	80 83       	st	Z, r24
    UART_TxHead = tmphead;
 5e0:	90 93 78 00 	sts	0x0078, r25

    /* enable UDRE interrupt */
    UART0_CONTROL    |= _BV(UART0_UDRIE);
 5e4:	55 9a       	sbi	0x0a, 5	; 10

}/* uart_putc */
 5e6:	08 95       	ret

000005e8 <uart_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
 5e8:	ef 92       	push	r14
 5ea:	ff 92       	push	r15
 5ec:	cf 93       	push	r28
 5ee:	df 93       	push	r29
 5f0:	e8 2e       	mov	r14, r24
 5f2:	e7 01       	movw	r28, r14
 5f4:	7e 01       	movw	r14, r28
 5f6:	f9 2e       	mov	r15, r25
 5f8:	e7 01       	movw	r28, r14
    while (*s) 
 5fa:	01 c0       	rjmp	.+2      	; 0x5fe <uart_puts+0x16>
      uart_putc(*s++);
 5fc:	e4 df       	rcall	.-56     	; 0x5c6 <uart_putc>
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    while (*s) 
 5fe:	89 91       	ld	r24, Y+
 600:	88 23       	and	r24, r24
 602:	e1 f7       	brne	.-8      	; 0x5fc <uart_puts+0x14>
      uart_putc(*s++);

}/* uart_puts */
 604:	df 91       	pop	r29
 606:	cf 91       	pop	r28
 608:	ff 90       	pop	r15
 60a:	ef 90       	pop	r14
 60c:	08 95       	ret

0000060e <uart_puts_p>:
Purpose:  transmit string from program memory to UART
Input:    program memory string to be transmitted
Returns:  none
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
 60e:	cf 93       	push	r28
 610:	df 93       	push	r29
 612:	ec 01       	movw	r28, r24
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
 614:	01 c0       	rjmp	.+2      	; 0x618 <uart_puts_p+0xa>
      uart_putc(c);
 616:	d7 df       	rcall	.-82     	; 0x5c6 <uart_putc>
 618:	fe 01       	movw	r30, r28
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
 61a:	21 96       	adiw	r28, 0x01	; 1
 61c:	84 91       	lpm	r24, Z+
 61e:	88 23       	and	r24, r24
 620:	d1 f7       	brne	.-12     	; 0x616 <uart_puts_p+0x8>
      uart_putc(c);

}/* uart_puts_p */
 622:	df 91       	pop	r29
 624:	cf 91       	pop	r28
 626:	08 95       	ret

00000628 <uart_available>:
Input:    None
Returns:  Integer number of bytes in the receive buffer
**************************************************************************/
int uart_available(void)
{
        return (UART_RX_BUFFER_MASK + UART_RxHead - UART_RxTail) % UART_RX_BUFFER_MASK;
 628:	80 91 77 00 	lds	r24, 0x0077
 62c:	20 91 76 00 	lds	r18, 0x0076
 630:	90 e0       	ldi	r25, 0x00	; 0
 632:	4f 96       	adiw	r24, 0x1f	; 31
 634:	82 1b       	sub	r24, r18
 636:	91 09       	sbc	r25, r1
 638:	6f e1       	ldi	r22, 0x1F	; 31
 63a:	70 e0       	ldi	r23, 0x00	; 0
 63c:	06 d0       	rcall	.+12     	; 0x64a <__divmodhi4>
}/* uart_available */
 63e:	08 95       	ret

00000640 <uart_flush>:
Input:    None
Returns:  None
**************************************************************************/
void uart_flush(void)
{
        UART_RxHead = UART_RxTail;
 640:	80 91 76 00 	lds	r24, 0x0076
 644:	80 93 77 00 	sts	0x0077, r24
}/* uart_flush */
 648:	08 95       	ret

0000064a <__divmodhi4>:
 64a:	97 fb       	bst	r25, 7
 64c:	09 2e       	mov	r0, r25
 64e:	07 26       	eor	r0, r23
 650:	0a d0       	rcall	.+20     	; 0x666 <__divmodhi4_neg1>
 652:	77 fd       	sbrc	r23, 7
 654:	04 d0       	rcall	.+8      	; 0x65e <__divmodhi4_neg2>
 656:	0c d0       	rcall	.+24     	; 0x670 <__udivmodhi4>
 658:	06 d0       	rcall	.+12     	; 0x666 <__divmodhi4_neg1>
 65a:	00 20       	and	r0, r0
 65c:	1a f4       	brpl	.+6      	; 0x664 <__divmodhi4_exit>

0000065e <__divmodhi4_neg2>:
 65e:	70 95       	com	r23
 660:	61 95       	neg	r22
 662:	7f 4f       	sbci	r23, 0xFF	; 255

00000664 <__divmodhi4_exit>:
 664:	08 95       	ret

00000666 <__divmodhi4_neg1>:
 666:	f6 f7       	brtc	.-4      	; 0x664 <__divmodhi4_exit>
 668:	90 95       	com	r25
 66a:	81 95       	neg	r24
 66c:	9f 4f       	sbci	r25, 0xFF	; 255
 66e:	08 95       	ret

00000670 <__udivmodhi4>:
 670:	aa 1b       	sub	r26, r26
 672:	bb 1b       	sub	r27, r27
 674:	51 e1       	ldi	r21, 0x11	; 17
 676:	07 c0       	rjmp	.+14     	; 0x686 <__udivmodhi4_ep>

00000678 <__udivmodhi4_loop>:
 678:	aa 1f       	adc	r26, r26
 67a:	bb 1f       	adc	r27, r27
 67c:	a6 17       	cp	r26, r22
 67e:	b7 07       	cpc	r27, r23
 680:	10 f0       	brcs	.+4      	; 0x686 <__udivmodhi4_ep>
 682:	a6 1b       	sub	r26, r22
 684:	b7 0b       	sbc	r27, r23

00000686 <__udivmodhi4_ep>:
 686:	88 1f       	adc	r24, r24
 688:	99 1f       	adc	r25, r25
 68a:	5a 95       	dec	r21
 68c:	a9 f7       	brne	.-22     	; 0x678 <__udivmodhi4_loop>
 68e:	80 95       	com	r24
 690:	90 95       	com	r25
 692:	bc 01       	movw	r22, r24
 694:	cd 01       	movw	r24, r26
 696:	08 95       	ret

00000698 <atoi>:
 698:	fc 01       	movw	r30, r24
 69a:	88 27       	eor	r24, r24
 69c:	99 27       	eor	r25, r25
 69e:	e8 94       	clt
 6a0:	21 91       	ld	r18, Z+
 6a2:	20 32       	cpi	r18, 0x20	; 32
 6a4:	e9 f3       	breq	.-6      	; 0x6a0 <atoi+0x8>
 6a6:	29 30       	cpi	r18, 0x09	; 9
 6a8:	10 f0       	brcs	.+4      	; 0x6ae <atoi+0x16>
 6aa:	2e 30       	cpi	r18, 0x0E	; 14
 6ac:	c8 f3       	brcs	.-14     	; 0x6a0 <atoi+0x8>
 6ae:	2b 32       	cpi	r18, 0x2B	; 43
 6b0:	39 f0       	breq	.+14     	; 0x6c0 <atoi+0x28>
 6b2:	2d 32       	cpi	r18, 0x2D	; 45
 6b4:	31 f4       	brne	.+12     	; 0x6c2 <atoi+0x2a>
 6b6:	68 94       	set
 6b8:	03 c0       	rjmp	.+6      	; 0x6c0 <atoi+0x28>
 6ba:	2a d0       	rcall	.+84     	; 0x710 <__mulhi_const_10>
 6bc:	82 0f       	add	r24, r18
 6be:	91 1d       	adc	r25, r1
 6c0:	21 91       	ld	r18, Z+
 6c2:	20 53       	subi	r18, 0x30	; 48
 6c4:	2a 30       	cpi	r18, 0x0A	; 10
 6c6:	c8 f3       	brcs	.-14     	; 0x6ba <atoi+0x22>
 6c8:	1e f4       	brtc	.+6      	; 0x6d0 <atoi+0x38>
 6ca:	90 95       	com	r25
 6cc:	81 95       	neg	r24
 6ce:	9f 4f       	sbci	r25, 0xFF	; 255
 6d0:	08 95       	ret

000006d2 <itoa>:
 6d2:	fb 01       	movw	r30, r22
 6d4:	9f 01       	movw	r18, r30
 6d6:	e8 94       	clt
 6d8:	42 30       	cpi	r20, 0x02	; 2
 6da:	bc f0       	brlt	.+46     	; 0x70a <itoa+0x38>
 6dc:	45 32       	cpi	r20, 0x25	; 37
 6de:	ac f4       	brge	.+42     	; 0x70a <itoa+0x38>
 6e0:	4a 30       	cpi	r20, 0x0A	; 10
 6e2:	29 f4       	brne	.+10     	; 0x6ee <itoa+0x1c>
 6e4:	97 fb       	bst	r25, 7
 6e6:	1e f4       	brtc	.+6      	; 0x6ee <itoa+0x1c>
 6e8:	90 95       	com	r25
 6ea:	81 95       	neg	r24
 6ec:	9f 4f       	sbci	r25, 0xFF	; 255
 6ee:	64 2f       	mov	r22, r20
 6f0:	77 27       	eor	r23, r23
 6f2:	be df       	rcall	.-132    	; 0x670 <__udivmodhi4>
 6f4:	80 5d       	subi	r24, 0xD0	; 208
 6f6:	8a 33       	cpi	r24, 0x3A	; 58
 6f8:	0c f0       	brlt	.+2      	; 0x6fc <itoa+0x2a>
 6fa:	89 5d       	subi	r24, 0xD9	; 217
 6fc:	81 93       	st	Z+, r24
 6fe:	cb 01       	movw	r24, r22
 700:	00 97       	sbiw	r24, 0x00	; 0
 702:	a9 f7       	brne	.-22     	; 0x6ee <itoa+0x1c>
 704:	16 f4       	brtc	.+4      	; 0x70a <itoa+0x38>
 706:	5d e2       	ldi	r21, 0x2D	; 45
 708:	51 93       	st	Z+, r21
 70a:	10 82       	st	Z, r1
 70c:	c9 01       	movw	r24, r18
 70e:	08 c0       	rjmp	.+16     	; 0x720 <strrev>

00000710 <__mulhi_const_10>:
 710:	7a e0       	ldi	r23, 0x0A	; 10
 712:	97 9f       	mul	r25, r23
 714:	90 2d       	mov	r25, r0
 716:	87 9f       	mul	r24, r23
 718:	80 2d       	mov	r24, r0
 71a:	91 0d       	add	r25, r1
 71c:	11 24       	eor	r1, r1
 71e:	08 95       	ret

00000720 <strrev>:
 720:	dc 01       	movw	r26, r24
 722:	fc 01       	movw	r30, r24
 724:	67 2f       	mov	r22, r23
 726:	71 91       	ld	r23, Z+
 728:	77 23       	and	r23, r23
 72a:	e1 f7       	brne	.-8      	; 0x724 <strrev+0x4>
 72c:	32 97       	sbiw	r30, 0x02	; 2
 72e:	04 c0       	rjmp	.+8      	; 0x738 <strrev+0x18>
 730:	7c 91       	ld	r23, X
 732:	6d 93       	st	X+, r22
 734:	70 83       	st	Z, r23
 736:	62 91       	ld	r22, -Z
 738:	ae 17       	cp	r26, r30
 73a:	bf 07       	cpc	r27, r31
 73c:	c8 f3       	brcs	.-14     	; 0x730 <strrev+0x10>
 73e:	08 95       	ret

00000740 <_exit>:
 740:	f8 94       	cli

00000742 <__stop_program>:
 742:	ff cf       	rjmp	.-2      	; 0x742 <__stop_program>
